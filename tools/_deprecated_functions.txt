function echoln($texte) // echo + passage à la ligne
{
    echo $texte . "\n";
}

function getparam($name, $default = "", $allow_sql = 0) // initialise proprement une variable avec le contenu d'un paramètre facultatif et filtrage anti injection de code
{
    if (isset($_REQUEST[$name])) {
        $param = $_REQUEST[$name];
        if (!is_utf8($param)) {
            $param = iconv('iso-8859-15', 'UTF-8', $param);
        } // Conversion des paramètres en UTF8
        $paramMaj = strtoupper($param);
        $interdits = array("SELECT", "INSERT", "DELETE", "UPDATE", "DROP", "TRUNCATE", "SHOW", "PASSWORD", "SLEEP", "FROM", "UNION");
        if (isset($GLOBALS['userlevel']) and $GLOBALS['userlevel'] >= 6) { // Retire UNION de la liste des mots à risque d'injection quand on a des droits suffisants
            $bidon = array_pop($interdits);
        }
        if (!$allow_sql) {
            $ok = true;
            foreach ($interdits as $interdit) {
                if (preg_match("`([[:space:]]|\)|'|\`)" . $interdit . "([[:space:]]|\(|'|\`)`i", $paramMaj)) {
                    // précédé et suivi de blanc, parenthèse, ou apostrophes
                    //if (isin($paramMaj,";")>0)  // rejet si mot interdit et ;
                    $ok = false;
                }
            }
            if (!$ok) {
                msg("Expression rejetee : $param");
                writelog("SQL-INJ : " . EA_sql_real_escape_string($param));
                $param = "";
            }
        }
        return $param;
    } 

    return $default;
}

function navigation($root = "", $level = 1, $type = "", $commune = null, $patronyme = null, $prenom = null)
{
    $signe = "";
    $s2 = "";
    $s4 = "";
    switch ($type) {
        case "N":
            $s2 = "tab_naiss.php";
            $s4 = "acte_naiss.php";
            $signe = "o";
            break;
        case "D":
            $s2 = "tab_deces.php";
            $s4 = "acte_deces.php";
            $signe = "+";
            break;
        case "M":
            $s2 = "tab_mari.php";
            $s4 = "acte_mari.php";
            $signe = "X";
            break;
        case "V":
            $s2 = "tab_bans.php";
            $s4 = "acte_bans.php";
            $signe = "Divers";
            break;
        case "A":
            $signe = "Distribution selon les années";
            break;
        case "R":  // recherche
            $signe = "";
            break;
    }
    if ($signe <> "") {
        $signe = " (" . $signe . ")";
    }
    echo '<div class="navigation">';
    echo 'Navigation';
    if ($level > 1) {
        if ($level > 10) {
            echo ' :: <a href="' . $root . '/index.php">Accueil</a>' . "\n";
            echo ' &gt; <a href="' . $root . '/admin/index.php">Administration</a>' . "\n";
            $path = $root . '/admin';
            $level = $level - 10;
        } else {
            if (SHOW_ALLTYPES == 0) {
                echo ' :: <a href="' . mkurl($root . '/' . "index.php", $type) . '">Communes et paroisses</a>' . "\n";
            } else {
                echo ' :: <a href="' . $root . '/index.php">Communes et paroisses</a>' . "\n";
            }
            $path = $root;
        }
    } else {
        if ($level == 1) {
            echo ' :: Communes et paroisses' . "\n";
        }
    }
    if ($level > 2) {
        echo ' &gt; <a href="' . mkurl($path . '/' . $s2, $commune) . '">' . $commune . $signe . '</a>';
    } else {
        if ($level == 2) {
            echo ' &gt; ' . $commune . $signe . "\n";
        }
    }
    if ($level > 3) {
        echo ' &gt; <a href="' . mkurl($path . '/' . $s2, $commune, $patronyme) . '">' . $patronyme . '</a>';
    } else {
        if ($level == 3) {
            echo ' &gt; ' . $patronyme . "\n";
        }
    }
    if ($level == 4) {
        echo ' &gt; ' . $prenom . "\n";
    }
    echo '</div>' . "\n";
}

function open_page($titre, $root = "", $js = null, $addbody = null, $addhead = null, $index = null, $rss = null)
{
    $carcode = 'UTF-8';
    //$carcode = 'ISO-8859-1';
    header('Content-Type: text/html; charset=' . $carcode);
    if (file_exists(dirname(__FILE__) . '/trt_charset.inc.php')) {
        include(dirname(__FILE__) . '/trt_charset.inc.php');
    }
    global $path, $userlogin, $scriptname, $commune;
    if ($scriptname == "") {
        $scriptname = "index";
    }

    if (!defined("META_DESCRIPTION")) {
        $meta_description = "";
    } else {
        $meta_description = META_DESCRIPTION;
    }
    if (!defined("META_KEYWORDS")) {
        $meta_keywords = "";
    } else {
        $meta_keywords = META_KEYWORDS;
    }

    echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">' . "\n";
    echo '<html xmlns="http://www.w3.org/1999/xhtml">' . "\n";
    echo "<head>\n";
    echo '<link rel="shortcut icon" href="' . $root . '/img/favicon.ico" type="image/x-icon" />' . "\n";
    echo '<link rel="stylesheet" href="' . $root . '/tools/css/actes.css" type="text/css" />' . "\n";
    //  if (file_exists($GLOBALS['EA_Appel_dOu'].'_config/actes.css'))
    if (file_exists(dirname(dirname(__FILE__)) . '/_config/actes.css')) {
        echo '<link rel="stylesheet" href="' . $root . '/_config/actes.css" type="text/css" />' . "\n";
    }
    echo '<link rel="stylesheet" href="' . $root . '/tools/css/actes_print.css" type="text/css"  media="print" />' . "\n";

    /**
     * @deprecated, admin will use the 'cookie tool' he want.
     * // Adapté de Cookie Consent plugin by Silktide - http://silktide.com/cookieconsent
     * if (!defined("COOKIE_MESSAGE")) {
    *     $cookie_message = "Acceptez-vous d'utiliser les Cookies ?";
    * } else {
    *     $cookie_message = COOKIE_MESSAGE;
    * }
    * if (!defined("COOKIE_URL_INFO")) {
    *     $cookie_url = "";
    * } else {
    *     $cookie_url = COOKIE_URL_INFO;
    * }
    * $cookie_styles = array(1 => "dark-top", 2 => "light-top", 3 => "dark-bottom", 4 => "light-bottom", 5 => "dark-floating", 6 => "light-floating");
    * if (!defined("COOKIE_STYLE")) {
    *     $cookie_style = $cookie_styles[1];
    * } else {
    *     $cookie_style = $cookie_styles[COOKIE_STYLE];
    * }
    * echo '<script type="text/javascript">
  	* 	window.cookieconsent_options = {
  	* 		"message":"' . $cookie_message . '",
  	* 		"dismiss":"Accepter les cookies",
  	* 		"learnMore":"En savoir plus",
  	* 		"link":"' . $cookie_url . '",
  	* 		"theme":"' . $cookie_style . '"};</script>';
    * echo '<script type="text/javascript" src="' . $root . '/tools/js/cookieconsent.min.js"></script>';
    * // Cookie Consent plugin //
    */
    $t = dirname(dirname(__FILE__)) . '/_config/js_externe_header.inc.php';
    if (file_exists($t)) {
        include($t);
    }

    if ($rss <> "") {
        echo '<link rel="alternate" type="application/rss+xml" title="' . $titre . '" href="' . $root . '/' . $rss . '" />';
    }
    if (!($js == null)) {
        echo '<script language="Javascript 1.2" type="text/javascript">' . "\n";
        echo $js;
        echo '</script>' . "\n";
    }
    echo "<title>$titre</title>\n";
    echo '<meta http-equiv="Content-Type" content="text/html; charset=' . $carcode . '" />' . "\n";
    echo '<meta name="expires" content="never" />' . "\n";
    echo '<meta name="revisit-after" content="15 days" />' . "\n";
    echo '<meta name="robots" content="index, nofollow" />' . "\n";
    echo '<meta name="description" content="' . $meta_description . ' ' . $titre . '" />' . "\n";
    echo '<meta name="keywords" content="' . $meta_keywords . ', ' . $titre . '" />' . "\n";
    echo '<meta name="generator" content="ExpoActes" />' . "\n";
    echo INCLUDE_HEADER . "\n";
    if (!($addhead == null)) {
        echo $addhead . "\n";
    }
    echo "</head>\n";
    echo '<body id="' . $scriptname . '" ' . " $addbody>\n";

    if (getparam(EL) == 'O') {
        echo $ExpoActes_Charset;
    }

    global $TIPmsg;  // message d'alerte pré-blocage IP
    if ($TIPmsg <> "" and (TIP_MODE_ALERT % 2) == 1) {
        echo '<h2><font color="#FF0000">' . $TIPmsg . "</font></h2>\n";
    }
    echo '<div id="top" class="entete">';
    if (EA_MAINTENANCE == 1) {
        echo '<font color="#FF0000"><b>!! MAINTENANCE !!</b></font>';
    }

    $bandeau = "_config/bandeau.htm";
    if ($root != $path) {
        $bandeau = "../" . $bandeau;
    }
    include($bandeau);
    echo "</div>\n";
}

function close_page($complet = 0, $root = null)
{
    global $TIPmsg;  // message d'alerte pré-blocage IP
    echo '<div id="pied_page2" class="pied_page2">';
    echo '<div id="totop2" class="totop2"><p class="totop2"><strong><a href="#top">Top</a></strong> &nbsp; </p></div>';
    echo '<div id="texte_pied2" class="texte_pied2"><p class="texte_pied2">' . PIED_PAGE . '</p></div>';
    echo '<div id="copyright2" class="copyright2"><p class="copyright2"><em><a href="http://expocartes.monrezo.be/">ExpoActes</a></em> version ' . EA_VERSION . $GLOBALS['EAg_BETA'] . ' (&copy;<em> 2005-' . date("Y") . ', ADSoft)</em></p></div>';
    echo '</div>';

    if (file_exists(__DIR__ . '/../_config/js_externe_footer.inc.php')) {
        include(__DIR__ . '/../_config/js_externe_footer.inc.php');
    }

    if ($TIPmsg <> "" && TIP_MODE_ALERT >= 2) {
        echo "<script language=javascript>";
        echo 'alert("' . $TIPmsg . '")';
        echo '</script>';
    }
    echo "</body>\n";
    echo "</html>\n";
}


/**
 * @deprecated
 * $script = file_get_contents(__DIR__ . '/tools/js/sha1.js');
 * <!-- @deprecated <script type="text/javascript">
 *   //<![CDATA[
 *   function pwProtect() {
 *       form = document.forms["eaform"];
 *       if (form.oldpassw.value == "") {
 *           alert("Erreur : L'ancien mot de passe est vide !");
 *           return false;
 *       }
 *       if (form.passw.value == "") {
 *           alert("Erreur : Le nouveau mot de passe est vide !");
 *           return false;
 *       }
 *       if (form.passw.value.length < 6) {
 *           alert("Erreur : Le nouveau mot de passe est trop court (min 6 caractères) !");
 *           return false;
 *       }
 *       if (!(form.passw.value == form.passwverif.value)) {
 *           alert("Erreur : Les nouveaux mots de passes ne sont pas identiques !");
 *           return false;
 *       }
 *       if (sha1_vm_test()) { // si le codage marche alors on l'utilise
 *           form.codedpass.value = hex_sha1(form.passw.value);
 *           form.codedoldpass.value = hex_sha1(form.oldpassw.value);
 *           form.passw.value = "";
 *           form.oldpassw.value = "";
 *           form.passwverif.value = "";
 *           form.iscoded.value = "Y";
 *       }
 *       return true;
 *   }
 *
 *   function seetext(x) {
 *       x.type = 'text';
 *   }
 *
 *   function seeasterisk(x) {
 *       x.type = 'password';
 *   }
 *   //]]>
 * </script> -->
 */

 function edit_text($name, $size, $value, $caption)
{
    echo ' <tr class="row1">' . "\n";
    echo "  <td align=right>" . $caption . " : </td>\n";
    echo '  <td>';
    if ($size <= 70) {
        $value = str_replace('"', '&quot;', $value);

        echo '<input type="text" name="' . $name . '" size=' . $size . '" maxlength=' . $size . ' value="' . $value . '">';
    } else {
        echo '<textarea name="' . $name . '" cols=70 rows=' . (min(4, $size / 70)) . '>' . $value . '</textarea>';
    }
    echo '  </td>';
    echo " </tr>\n";
}

/**
 * @deprecated Expoactes system
 */
function check_new_version($key, $urlsite, $type_site = '')
{
    //$MODE_check = '';
    $MODE_check = 'JSON';

    // Par défaut :
    $lavaleur = EA_VERSION . '|l';
    if (!isset($_COOKIE[$key])) {
        $h = $_SERVER['HTTP_HOST'];
        $r = $_SERVER['REQUEST_URI'];

        if ($MODE_check === 'JSON') {
            if (!isset($_REQUEST['EA_VERSION_LAST'])) {
                $serveur_addrPhpSQL = '&addr=' . $_SERVER['SERVER_ADDR'] . '&PhpSQL=PHP-' . phpversion() . '_SQL-' . EA_sql_get_server_info() . '&V=' . EA_VERSION;
                $X = '<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.5.0/jquery.min.js"></script>
<script language="javascript">
    $.extend( {
        redirectPost: function (location, args) {
            var form = $("<form>", { action: location, method: "post" });
            $.each(args,
                function (key, val) {
                    $(form).append(
                        $("<input>", { type: "hidden", name: key, value: val })
                    );
                });
            $(form).appendTo("body").submit();
        }
    });
    window.onload = function(e) {
        var toLoad = "' . SITE_INVENTAIRE . 'versions.php?type=JSON&req=' . $h . $r . '&inv=' . $type_site . $serveur_addrPhpSQL . '";
        var retourne = "";
        $.ajax({ url: toLoad,
            dataType: "json",
            timeout: 3000, // sets timeout to 3 seconds (ok 30 génère  erreur)
            success: function(REPONSE) {
				retourner(JSON.stringify(REPONSE));
			},
            error: function (jqXHR, textStatus, errorThrown) {
				retourner("erreur");
			},
        });
        function retourner(retourne) {
    		var myArray = {"EA_VERSION_LAST": retourne };
    	    $.redirectPost("", myArray);
        }
    }
</script>
';
                echo $X;
                return $lavaleur;
            } else {
                $obj = json_decode($_REQUEST['EA_VERSION_LAST'], true);
                if (!isset($obj['EXPOACTES'])) {
                    $newvers = EA_VERSION;
                    $status_inv = 'l';
                    $lavaleur = EA_VERSION . '|l';
                } else {
                    $lavaleur = $obj['EXPOACTES'];
                    $t = explode('|', $lavaleur . '|l');
                    $newvers = $t[0];
                    $status_inv = $t[1];
                }
            }
        } else {
            $lines = @file($urlsite . 'versions.php?req=' . $h . $r . '&inv=' . $type_site);
            if ($lines) {
                $lavaleur = "";
                foreach ($lines as $line) {
                    $laligne = explode(":", $line);
                    if ($laligne[0] == $key) {
                        $lavaleur = $laligne[1];
                    }
                }
            }
        }
        // setcookie($key, $lavaleur);  // session uniquement
    }
    return $lavaleur;
}


/**
 * @deprecated Expoactes system
 */
function check_version($currentversion, $requiredversion)
// retourne VRAI si currentversion est superieur ou égal à requiredversion
{
    list($majorC, $minorC, $editC) = explode(".", $currentversion);
    list($majorR, $minorR, $editR) = explode(".", $requiredversion);

    $majorC = intval($majorC);
    $majorR = intval($majorR);
    $minorC = intval($minorC);
    $minorR = intval($minorR);
    $editC  = intval($editC);
    $editR  = intval($editR);

    if ($majorC > $majorR) {
        return true;
    }
    if ($majorC < $majorR) {
        return false;
    }

    if ($minorC > $minorR) {
        return true;
    }
    if ($minorC < $minorR) {
        return false;
    }

    if ($editC  >= $editR) {
        return true;
    }
    if ($editC  >= $editR) {
        return true;
    }

    return false;
}


function dequote_magic_quotes() // pour retirer les magic quotes s il y en a !! sur REQUEST et $_COOKIE
{   // deprecated from PHP 7.4 and useless since 5.4)
    if (version_compare(phpversion(), '5.4.0', '<')) {
        if (get_magic_quotes_gpc()) {
            if (is_array($_REQUEST)) {
                foreach ($_REQUEST as $k => $v) {
                    if (is_string($v)) {
                        $_REQUEST[$k] = stripslashes($v);
                    }
                }
            }
            if (is_array($_COOKIE)) {
                foreach ($_COOKIE as $k => $v) {
                    if (is_string($v)) {
                        $_COOKIE[$k]  = stripslashes($v);
                    }
                }
            }
        }
    }
}


function menu_datas($current)
{
    global $userlevel;
    echo '<p align="center"><strong>Administration des données : </strong>';
    showmenu('Statistiques', 'maj_sums.php', 'S', $current, false);
    if ($userlevel > 7) {
        showmenu('Localités', 'listgeolocs.php', 'L', $current);
    }
    showmenu('Ajout d\'un acte', 'ajout_1acte.php', 'A', $current);
    if ($userlevel > 7) {
        showmenu('Corrections groupées', 'corr_grp_acte.php', 'G', $current);
        showmenu('Backup', 'exporte.php?Destin=B', 'B', $current);
        showmenu('Restauration', 'charge.php?Origine=B', 'R', $current);
    }
    echo '</p>';
}

function con_une_db($ladbaddr, $ladbuser, $ladbpass, $ladbname, $show = false, $new_link = false) // fonction de connexion à une DB
{
    global $dbok;

    if (file_exists('tools/function.php')) {
        $EA_Appel_dOu = '';
        $EA_Script_Courant = basename($_SERVER['PHP_SELF']);
    } else {
        $EA_Appel_dOu = '../';
        $EA_Script_Courant = basename(dirname($_SERVER['PHP_SELF'])) . '/' . basename($_SERVER['PHP_SELF']); // Ne pas utiliser DIRECTORY_SEPARATOR
    }

    if ($ladbaddr == '@@serveur_BD@@') {
        $dblink = false;
    } elseif (function_exists('EA_sql_connect')) {
        $dblink = @EA_sql_connect("$ladbaddr", "$ladbuser", "$ladbpass", $new_link);
    } else {
        $dblink = @mysqli_connect("$ladbaddr", "$ladbuser", "$ladbpass", "$ladbname");
    }
    if ($dblink) {
        if ($show) {
            echo '<p>Connexion au serveur MySQL :<b> OK</b></p>';
        }
        $dbok = EA_sql_select_db("$ladbname", $dblink);
        if ($dbok) {
            EA_sql_query('SET NAMES utf8', $dblink);  // oblige MySQL à répondre en UTF-8  (ISO-8859-1 par défaut)
            if ($show) {
                echo '<p>Connexion &agrave; la base de donn&eacute;es : <b> OK</b></p>';
            }
        } else {
            if (in_array($EA_Script_Courant, array('admin/index.php', 'install/install.php', 'install/update.php'))) {
                echo '<a href="' . $EA_Appel_dOu . 'install/configuration.php">Configurer la base de donn&eacute;es</a>';
            } else {
                msg("012 : La base sp&eacute;cifi&eacute;e n'est pas accessible sur le serveur MySQL : " . EA_sql_error());
            }
            exit(0);
        }
        return $dblink;
    } else {
        if (in_array($EA_Script_Courant, array('admin/index.php', 'install/install.php', 'install/update.php', 'index.php'))) {
            echo '<a href="' . $EA_Appel_dOu . 'install/configuration.php">Configurer la base de donn&eacute;es</a>';
        } else {
            msg("011: Impossible d'ouvrir la connexion au serveur MySQL avec l'utilisateur pr&eacute;sent&eacute; : " . EA_sql_error());
        }
        exit(0);
    }
}

function con_db($show = false) // fonction de connexion des DB
{
    global $dbaddr, $dbuser, $dbpass, $dbname, $a_db, $dbok;
    global $udbaddr, $udbuser, $udbpass, $udbname, $u_db;

    if (isset($udbaddr, $udbuser, $udbpass, $udbname)) {
        if ($show) {
            echo '<p><b>Base des utilisateurs :</b></p>';
        }
        $u_db = con_une_db($udbaddr, $udbuser, $udbpass, $udbname, $show);
        if ($show) {
            echo '<p><b>Base des actes :</b></p>';
        }
        $a_db = con_une_db($dbaddr, $dbuser, $dbpass, $dbname, $show, true);
    } else {
        if ($show) {
            echo '<p><b>Base des actes et des utilisateurs :</b></p>';
        }
        $u_db = $a_db = con_une_db($dbaddr, $dbuser, $dbpass, $dbname, $show);
    }
    return $a_db;
}

function icone($action)
{
    global $root;
    switch ($action) {
        case "P":
            $alt = "Permuter";
            $ima = "permuter.gif";
            break;
        case "S":
            $alt = "Supprimer";
            $ima = "supprimer.gif";
            break;
        case "M":
            $alt = "Modifier";
            $ima = "modifier.gif";
            break;
    }

    return '<img width="11" hspace="7" height="13" title="' . $alt . '" alt="' . $alt . '" src="' . $root . '/assets/img/' . $ima . '">';
}

function checked($valeur, $defaut = 1)  // retourne le mot checked si $valeur=1 pour CkeckBox ou radiobutton
{
    if ($valeur == $defaut) {
        return ' checked="checked"';
    } 
    
    return '';
}

function listbox_cols($fieldname, $default)
{
    global $acte;
    $i = 1;
    $len = 15;
    echo '<select name="' . $fieldname . '" size="1">' . "\n";
    echo '<option ' . selected_option(0, $default) . '> -- </option>' . "\n";
    foreach ($acte as $zone) {
        $zone = trim($zone);
        if (strlen($zone) > $len - 2) {
            $exemple = mb_substr($zone, 0, $len - 2) . "..";
        } else {
            $exemple = mb_substr($zone, 0, $len);
        }

        echo '<option ' . selected_option($i, $default) . '>Col. ' . nomcolonne($i) . '-' . $i . ' (' . $exemple . ')</option>' . "\n";
        $i++;
    }
    echo " </select>\n";
}

function ischecked($name)  // retourne 1 ou 0 suivant que le parmetres est checké ou pas
{
    if (!isset($_REQUEST[$name])) {
        return 0;
    }

    return $_REQUEST[$name];
}

function listbox_users($fieldname, $default, $levelmin, $zero = 0, $txtzero = '')
{
    global $u_db;
    $request = "SELECT ID, NOM, PRENOM FROM " . EA_UDB . "_user3 WHERE LEVEL >= " . $levelmin . " ORDER BY NOM,PRENOM";
    //optimize($request,$u_db);
    if ($result = EA_sql_query($request, $u_db)) {
        $i = 1;
        echo '<select name="' . $fieldname . '">' . "\n";
        if ($zero == 1) {
            echo '<option ' . selected_option(0, $default) . '>' . $txtzero . '</option>' . "\n";
        }
        while ($row = EA_sql_fetch_array($result)) {
            echo '<option ' . selected_option($row["ID"], $default) . '>' . $row["NOM"] . " " . $row["PRENOM"] . '</option>' . "\n";
            $i++;
        }
    }
    echo " </select>\n";
}

function menu_software($current)
{
    global $root;
    echo '<p align="center"><strong>Administration du logiciel : </strong>';
    echo '<a href="' . $root . '/admin/gest_params.php" ' . ('P' == $current ? 'class="bolder"' : '') . '>Paramétrage</a>';
    echo ' | <a href="' . $root . '/admin/gest_labels.php" ' . ('Q' == $current ? 'class="bolder"' : '') . '>Etiquettes</a>';
    echo ' | <a href="' . $root . '/admin/serv_params.php" ' . ('E' == $current ? 'class="bolder"' : '') . '>Etat serveur</a>';
    echo ' | <a href="' . $root . '/admin/gesttraceip.php" ' . ('F' == $current ? 'class="bolder"' : '') . '>Fitrage IP</a>';
    echo ' | <a href="' . $root . '/admin/gestindex.php" ' . ('I' == $current ? 'class="bolder"' : '') . '>Index</a>';
    echo ' | <a href="' . $root . '/admin/listlog.php" ' . ('J' == $current ? 'class="bolder"' : '') . '>Journal</a>';
    echo '</p>';
}

function menu_users($current)
{
    global $udbname;
    echo '<p align="center"><strong>Administration utilisateurs : </strong>';
    echo '<a href="' . $root . '/admin/listusers.php" ' . ('L' == $current ? 'class="bolder"' : '') . '>Lister</a>';
    echo ' | <a href="' . $root . '/admin/gestuser.php?id=-1" ' . ('A' == $current ? 'class="bolder"' : '') . '>Ajouter</a>';
    echo ' | <a href="' . $root . '/admin/loaduser.php" ' . ('I' == $current ? 'class="bolder"' : '') . '>Importer</a>';
    echo ' | <a href="' . $root . '/admin/expsupuser.php" ' . ('E' == $current ? 'class="bolder"' : '') . '>Exporter/Supprimer</a>';
    echo ' | <a href="' . $root . '/admin/envoimail.php" ' . ('M' == $current ? 'class="bolder"' : '') . '>Informer</a>';
    echo ' | <a href="' . $root . '/admin/gestpoints.php" ' . ('S' == $current ? 'class="bolder"' : '') . '>Modifications groupées</a>';
    echo '</p>';
}

function show_certifications()
{
    global $root;
    // Validation XHTML
    $host = $_SERVER['HTTP_HOST'];
    $uri  = rtrim($_SERVER['PHP_SELF'], "/\\");
    echo '<div class="certificats">' . "\n";
    echo '<a href="http://validator.w3.org/check?uri=http://' . $host . $uri . '">';
    echo '<img src="' . $root . '/img/valid-xhtml-10.gif" alt="Site Valide XHTML 1.0" border="0" />';
    echo '</a></div>' . "\n";
}

function menu_admin($root, $userlevel)
{
    global $userlogin;
    $login = '&nbsp; &nbsp;' . $userlogin . '';

    echo '<div class="menu_zone">' . "\n";
    echo '<div class="menu_titre">Administration &lt;' . $userlogin . '&gt;</div>' . "\n";
    echo '<div class="menuCorps"><dl>' . "\n";
    if ($userlevel >= 5) {
        echo '<dt><a href="' . $root . '/admin/index.php">Inventaire des actes</a></dt>' . "\n";
    }
    if ($userlevel >= CHANGE_PW) {
        echo '<dt><a href="' . $root . '/changepw.php">Changer le mot de passe</a></dt>' . "\n";
    }
    if ($userlevel >= 5) {
        echo '<dt><a href="' . $root . '/admin/charge.php">Charger des actes NIMEGUE</a></dt>' . "\n";
    }
    if ($userlevel >= 6) {
        echo '<dt><a href="' . $root . '/admin/chargecsv.php">Charger des actes CSV</a></dt>' . "\n";
    }
    if ($userlevel >= 5) {
        echo '<dt><a href="' . $root . '/admin/supprime.php">Supprimer des actes</a></dt>' . "\n";
        echo '<dt><a href="' . $root . '/admin/exporte.php">Réexporter des actes</a></dt>' . "\n";
    }
    if ($userlevel >= 7) {
        echo '<dt><a href="' . $root . '/admin/maj_sums.php">Administrer les données</a></dt>' . "\n";
    }
    if ($userlevel >= 9) {
        echo '<dt><a href="' . $root . '/admin/listusers.php">Administrer les utilisateurs</a></dt>' . "\n";
        echo '<dt><a href="' . $root . '/admin/gest_params.php">Administrer le logiciel</a></dt>' . "\n";
    }
    echo '<dt><a href="' . $root . '/admin/aide/aide.html">Aide</a></dt>' . "\n";
    echo '<dt><a href="' . $root . '/index.php?act=logout">Déconnexion</a></dt>' . "\n";
    echo '</dl></div>' . "\n";
    echo '</div>' . "\n";
}


function showmenu($texte, $proc, $id, $current, $barre = true)
{
    if ($barre) {
        echo ' | ';
    }
    if ($id == $current) {
        echo '<a href="' . $proc . '" class="bolder">' . $texte . '</a>';
    } else {
        echo '<a href="' . $proc . '">' . $texte . '</a>';
    }
}

function listbox_types($fieldname, $default, $vide = 0)
{
    $request = "SELECT DISTINCT TYPACT AS TYP FROM " . EA_DB . "_sums ORDER BY INSTR('NMDV',TYPACT)";

    if ($result = EA_sql_query($request)) {
        $i = 1;
        echo '<select name="' . $fieldname . '" size="1">';
        if ($vide) {
            echo '<option> </option>';
        }
        while ($row = EA_sql_fetch_array($result)) {
            echo '<option ' . selected_option($row["TYP"], $default) . '>' . typact_txt($row["TYP"]) . '</option>';
            $i++;
        }
    }
    echo " </select>";
}

function communede($comdep)
{ // Compatibilité anciens appels
    list($comm, $dep) = decompose_comm_dep($comdep);
    return $comm;
}

function departementde($comdep)
{ // Compatibilité anciens appels
    list($comm, $dep) = decompose_comm_dep($comdep);
    return $dep;
}

function menu_public()
{
    global $userlogin, $root, $userlevel;
    $changepw = "";
    $login = "";
    if ($userlogin != "") {
        $login = '&nbsp;&lt;' . $userlogin;
        $solde = current_user_solde();
        if ($solde < 9999) {
            $login .= ' : ' . $solde . ' pts';
        }
        $login .= '&gt;';

        if ($userlevel >= CHANGE_PW) {
            $changepw = '<dt><a href="' . $root . '/changepw.php">Changer le mot de passe</a></dt>' . "\n";
        }
    }
    echo '<div class="menu_zone">' . "\n";
    // traite le cas ou le niveau PUBLIC autre que 4 et 5, on affiche l'accès administration au dela d'un niveau 5 de l'utilisateur
    if (max($userlevel, PUBLIC_LEVEL) > 5) {
        echo '<div class="menu_titre">Administration' . $login . '</div>' . "\n";
    }  // pas de membres visiteurs dans ce cas
    else {
        echo '<div class="menu_titre">Accès membre' . $login . '</div>' . "\n";
    }
    echo '<div class="menuCorps"><dl>' . "\n";
    if ($userlogin == "") {
        echo '<dt><a href="' . $root . '/login.php">Connexion</a></dt>' . "\n";
        if (SHOW_ACCES == 1) {
            echo '<dt><a href="' . $root . '/acces.php">Conditions d\'accès</a></dt>' . "\n";
        }
    } else {
        if ($userlevel > 5) {
            echo '<dt><a href="' . $root . '/admin/index.php">Gérer les actes</a></dt>' . "\n";
        }
        echo $changepw;
        echo '<dt><a href="' . $root . '/index.php?act=logout">Déconnexion</a></dt>' . "\n";
    }
    if (EMAIL_CONTACT <> "") {
        echo '<dt><a href="' . $root . '/form_contact.php">Contact</a></dt>' . "\n";
    }
    if ($userlevel > 5) {
        echo '<dt><a href="' . $root . '/admin/aide/aide.html">Aide</a></dt>' . "\n";
    }
    echo '</dl></div>' . "\n";
    echo '</div>' . "\n";
}
function form_recherche()
{
    global $root, $session;

    $act_types = [
        ['code' => 'N', 'code_3' => 'NAI', 'label' => 'Naissances'],
        ['code' => 'M', 'code_3' => 'MAR', 'label' => 'Mariages'],
        ['code' => 'D', 'code_3' => 'DEC', 'label' => 'Décès'],
        ['code' => 'V', 'code_3' => 'DIV', 'label' => 'Actes divers'],
    ];

    if (PUBLIC_LEVEL >= 3 || ($session->has('user') && $session->get('user')['level'] >= 3 && ((current_user_solde() > 0) || RECH_ZERO_PTS == 1))) {
        echo '<div class="menu_zone">';
        echo '<div class="menu_titre">Recherche directe</div>';
        echo '<form class="form_rech" name="recherche" method="post" action="' . $root . '/chercher.php">';
        echo '&nbsp;<input type="text" name="achercher">';
        echo '&nbsp;<input type="submit" name="Submit" value="Chercher">';
        echo '<br><input type="radio" name="zone" value="1" checked="checked" />Intéressé(e) ';
        echo '<br><input type="radio" name="zone" value="2">Mère, conjoint, témoins, parrain...';
        if (CHERCH_TS_TYP != 1) {
            echo '<br>&nbsp;Dans les actes de&nbsp;';
            echo '<select name="typact" size="1">';
            foreach ($act_types as $act_type) {
                echo '<option value="' . $act_type['code'] . '" ' . ('N' === $act_type['code'] ? 'selected' : '') . '>' . $act_type['label'] . '</option>';
            }
            echo " </select>";
        }
        echo '<input type="hidden" name="direct" value="1">';
        echo '<input type="hidden" name="debug" value="' . getparam('debug') . '">';
        echo '<div class="menuTexte"><dl><dd>';
        echo '<a href="' . $root . '/rechavancee.php">Recherche avancée</a>&nbsp; &nbsp;';

        if ((RECH_LEVENSHTEIN == 2) && (max($session->get('user')['level'], PUBLIC_LEVEL) >= LEVEL_LEVENSHTEIN)) {
            echo '<br><a href="' . $root . '/rechlevenshtein.php">Recherche Levenshtein</a>&nbsp; &nbsp;';
        }

        echo '</dd></dl></div>';
        echo '</form>';
        echo '</div>';
    }
}


/* // Lecture des paramètres de configuration

// Pour déplacer dans load_params, il faut protéger par if (!defined)
define("EA_VERSION_PRG", "3.2.4");
//{ $GLOBALS['EAg_BETA']="-beta"; }
//{ $GLOBALS['EAg_BETA']="-rc6"; }
{
    $GLOBALS['EAg_BETA'] = "-p406";
}

$lg = '';
load_params();

// Pour déplacer dans load_params, il faut protéger par if (!defined)
define("EXT_BACKUP", ".bea");
define("DIR_BACKUP", "_backup/"); */

function load_params()
{
    if (!defined("EA_DB")) define("EA_DB", "cr"); // Préfixe des noms de tables
    if (!defined("EA_UDB")) define("EA_UDB", EA_DB); //préfixe de la table utilisateurs
    if (function_exists("date_default_timezone_set")) date_default_timezone_set('Europe/Paris');

    $GLOBALS['TIPmsg'] = "";
    $GLOBALS['lg'] = 'fr';
    // $GLOBALS['T0'] = time();

    $db  = con_db();
    $res = EA_sql_query("SHOW TABLES LIKE '" . EA_DB . "_params';");
    if (! $res) {
        echo "ERREUR SHOW TABLES LIKE '" . EA_DB . "_params';";
        exit;
    } elseif (EA_sql_num_rows($res) > 0) {
        $request = "SELECT * FROM " . EA_DB . "_params";
        $result = EA_sql_query($request);
        while ($row = EA_sql_fetch_array($result)) {
            if (!defined($row["param"])) {
                define($row["param"], html_entity_decode($row["valeur"], ENTITY_REPLACE_FLAGS, ENTITY_CHARSET));
            }
        }
    }

    if (!defined("EA_ERROR")) define("EA_ERROR", 0);  // Pas d'affichage d'erreur en production   
    if (defined('EA_LANG')) $GLOBALS['lg'] = EA_LANG;
    // Autres lus dans les paramètres mais contrôles dispersés dans les scripts, en particulier nécessaires lors d'une installation
    if (!defined("EA_VERSION")) define("EA_VERSION", EA_VERSION_PRG);
    if (!defined("EA_MAINTENANCE")) define("EA_MAINTENANCE", 0);
    if (!defined("EXTERN_MAIL")) define("EXTERN_MAIL", 0);
    if (!defined('CHERCH_TS_TYP')) define('CHERCH_TS_TYP', 0);
    if (!defined("ECLAIR_LOG")) define("ECLAIR_LOG", 0);
    if (!defined("TIP_FILTRER")) define("TIP_FILTRER", "0");
    if (!defined("TIP_AUTOFREE")) define("TIP_AUTOFREE", "0");
    if (!defined("TIP_DUREE")) define("TIP_DUREE", "1");
    if (!defined("UPLOAD_DIR")) define("UPLOAD_DIR", "_upload");
    if (!defined("INCLUDE_HEADER")) define("INCLUDE_HEADER", "");
    if (!defined("PIED_PAGE")) define("PIED_PAGE", "");
    if (!defined("PUB_ZONE_MENU")) define('PUB_ZONE_MENU', "Zone info libre");
    if (!defined("SITENAME")) define("SITENAME", "Civil-Records");
    if (!defined('SITE_URL')) define('SITE_URL', '');
    if (!defined("SITE_INVENTAIRE")) define("SITE_INVENTAIRE", "");
    // On peut a) mettre dans "config" : define('EA_URL_CE_SERVEUR', 'http://127.0.0.1'); b) ajouter dans act_params "EA_URL_CE_SERVEUR"
    if (!defined('EA_URL_CE_SERVEUR')) define('EA_URL_CE_SERVEUR', mkSiteUrl()); // "actutils.php" soit toujours référencé après "adlcutils.php" définissant mkSiteUrl
    if (!defined('EA_URL_SITE')) define('EA_URL_SITE', EA_URL_CE_SERVEUR); // dans l'immédiat on ne change pas les anciennes REFs
    if (!defined('TOUJOURS')) define('TOUJOURS', '2033-12-31'); // limite des comptes illimités
}

function selected_option($valeur, $defaut)  // pour listbox
{
    $valeur = strval($valeur);
    $defaut = strval($defaut);
    if ($valeur == $defaut) {
        return 'value="' . $valeur . '" selected="selected"';
    }

    return 'value="' . $valeur . '"';
}


function mkSiteUrl() // Compose le nom du serveur http:// ou https:// etc....  On récupère l'URL (sans le / de fin)
{
    // Utilisé dans :
    // activer_compte.php, cree_compte.php, localite.php, renvoilogin.php, signal_erreur.php, rss.php
    // admin/approuver_compte.php, admin/envoimail.php, admin/gestgeoloc.php, admin/gestuser.php, admin/loaduser.php
    // tools/carto_index.php, ?? tools/loginutils.php, ?? tools/traceIP/trace_ip.php
    // equivalent à   "http://".$_SERVER["SERVER_NAME"].":".$_SERVER["SERVER_PORT"];
    //          ET   "http://".$_SERVER['HTTP_HOST']
    // règle le pb http ou https et SERVER_PORT particulier ou par défaut
    $is_SSL = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on');
    $HttpOuHttps = strtolower($_SERVER['SERVER_PROTOCOL']);
    $HttpOuHttps = substr($HttpOuHttps, 0, strpos($HttpOuHttps, '/')) . (($is_SSL) ? 's' : '');
    $ServerPort = ((!$is_SSL && $_SERVER['SERVER_PORT'] == '80') || ($is_SSL && $_SERVER['SERVER_PORT'] == '443'))
        ? '' : ':' . $_SERVER['SERVER_PORT']; // Ne met le port que si c'est autre chose que 80(http) ou 443(https)
    $Hote = isset($_SERVER['HTTP_HOST']) ? $_SERVER['HTTP_HOST'] : $_SERVER['SERVER_NAME'] . $ServerPort;
    $url_du_site = $HttpOuHttps . '://' . $Hote;
    // On peut forcer ici $url_du_site = "https://monsite.xxx" en cas de problème
    return $url_du_site;
}


function execute_script_sql($filename, $prefixe = "", $selecttxt = "")
{
    global $config;
    if ($prefixe == "") {
        $prefixe = $config->get('EA_DB');
    }

    if (!file_exists($filename)) {
        msg('041 : Impossible de trouver le script SQL "' . $filename . '".');
        $ok = false;
        die();
    }

    $listreq = explode(';', file_get_contents($filename));
    $ok = true;
    $i  = 0;

    while ($ok and $i < count($listreq)) {
        $reqmaj = $listreq[$i];
        if ($selecttxt == "" or isin($reqmaj, $selecttxt) >= 0) { // si instruction selectionnée ou toutes
            $reqmaj = str_replace("EA_DB_", $prefixe . "_", $reqmaj);

            if (strlen(trim($reqmaj)) > 0) {
                if ($result = EA_sql_query($reqmaj . ';')) {
                    echo '<p>Action ' . ($i + 1) . ' ok</p>';
                } else {
                    echo ' -> Erreur : ';
                    echo '<p>' . EA_sql_error() . '<br>' . $reqmaj . '</p>';
                    $ok = false;
                }
            }
        }
        $i++;
    }
    return $ok;
}

/**
 * pub éventuelle
 */
function show_pub_menu()
{
    global $config;

    echo '<div class="box">';
    echo '<div class="box-title">Info</div>';
    echo '<div class="box-body p-2">';
    echo $config->get('PUB_ZONE_MENU');
    echo '</div>';
    echo '</div>';
}


/**
 * Compose une URL avec les arguments passés en mode chemin ou non suivant config.
 * @deprecated
 */
function mkurl($script, $arg1, $arg2 = "", $args = "")
{
    global $config;
    $url = $script; // par défaut
    if ($config->get('FULL_URL') == 1) {
        if ($arg1 <> "") {
            $url = $script . '/' . urlencode(encodemyslash($arg1));
        }
        if ($arg2 <> "") {
            $url .= '/' . urlencode(encodemyslash($arg2));
        }
        if ($args <> "") {
            $url .= "?" . $args;
        }
    } else {
        if ($arg1 <> "") {
            $url = $script . '?args=' . urlencode($arg1);
        }
        if ($arg2 <> "") {
            $url .= ',' . urlencode($arg2);
        }
        if ($args <> "") {
            $url .= "&amp;" . $args;
        }
    }
    return $url;
}


function alaligne($texte)
{
    // insert des BR pour provoquer des retour à la ligne
    $order   = array("\r\n", "\n", "\r");
    $replace = '<br />';
    // Traitement du premier \r\n, ils ne seront pas convertis deux fois.
    return str_replace($order, $replace, $texte);
}


function menu_public()
{
    global $root, $config, $userAuthorizer;
    echo '<div class="box">';
    echo '<div class="box-title">Accès membre</div>';
    echo '<div class="box-body">';
    echo '<nav class="nav">';
    echo '<a href="' . $root . '/">Accueil</a>';
    if (!$userAuthorizer->isAuthenticated()) {
        echo '<a href="' . $root . '/login.php">Connexion</a>';
        if ($config->get('SHOW_ACCES') == 1) {
            echo '<a href="' . $root . '/acces.php">Conditions d\'accès</a>';
        }
    } else {
        if ($userAuthorizer->isGranted($config->get('CHANGE_PW'))) {
            echo '<a href="' . $root . '/changepw.php">Changer le mot de passe</a>';
        }
        echo '<a href="' . $root . '/index.php?act=logout">Déconnexion</a>';
    }
    if ($config->get('EMAIL_CONTACT') <> "") {
        echo '<a href="' . $root . '/form_contact.php">Contact</a>';
    }
    echo '</nav></div>';
    echo '</div>';
}


function sendmail($from, $to, $sujet, $message)
{
    global $config;
    /*
        echo '<p>Expéditeur : ['.htmlspecialchars($from, ENTITY_REPLACE_FLAGS, ENTITY_CHARSET).']';
        echo '<br />Destinataire : ['.htmlspecialchars($to, ENTITY_REPLACE_FLAGS, ENTITY_CHARSET).']';
        echo '<br />Sujet : ['.htmlspecialchars($sujet, ENTITY_REPLACE_FLAGS, ENTITY_CHARSET).']'.base64_encode($sujet);
        echo '<br />Message : ['.htmlspecialchars($message, ENTITY_REPLACE_FLAGS, ENTITY_CHARSET).']'.'</p>';
        */
    if ($config->get('EXTERN_MAIL') == 0) {
        // appel de la fonction interne ... pour autant qu'elle soit bien configurée
        $headers  = 'MIME-Version: 1.0' . "\n";
        $headers .= "Content-Type: text/plain; charset=" . MAIL_CHARSET . "; format=flowed\n";
        $headers .= "Content-Transfer-Encoding: 8bit\n";
        $headers .= "X-Mailer: PHP" . phpversion() . "\n";
        $headers .= 'From: ' . $from . "\n";

        $ok =  @mail($to, mail_encode($sujet), $message, $headers);
        if (!$ok) {
            msg("051 : L'envoi du mail via la procédure interne à PHP n'a pas réussi.");
            global $userlogin;
            if ($userlogin <> "") {
                echo '<p>Expéditeur : ' . htmlspecialchars($from, ENTITY_REPLACE_FLAGS, ENTITY_CHARSET);
                echo '<br />Destinataire : ' . htmlspecialchars($to, ENTITY_REPLACE_FLAGS, ENTITY_CHARSET) . '</p>';
                //mail($to, mail_encode($sujet), $message, $headers); // nouvel essai.
            }
        }
        return $ok;
    } else {
        if (file_exists(dirname(__FILE__) . '/PHPMailer/') and file_exists(dirname(__FILE__) . '/mail_externe.inc.php')) {
            // Gestion Envoi mel par script externe local et PHPMailer
            $retour_mail_externe = false;
            // Le script doit positionner la variable $retour_mail_externe à "false" ou "true", à défaut ce script considérera que l'envoi de mél a échoué même s'il a réussi.
            require_once(dirname(__FILE__) . '/mail_externe.inc.php');
            return $retour_mail_externe;
        }
        // envoi du mail vers un autre serveur smtp ... si c'est nécessaire
        $lb = "\r\n";                //linebreak

        if ($config->get('SMTP_HOST') == "" or $config->get('LOC_HOST') == "" or $config->get('LOC_MAIL') == "") {
            msg("052 : Paramètres de gestion du mail incomlètement configurés.");
            return false;
        }
        // if ($smtp_port=="")
        $smtp_port = 25;  // valeur par défaut

        $contenu  = "from:" . $from . $lb;
        $contenu .= "to:" . $to . $lb;
        $contenu .= "subject:" . $sujet . $lb;
        $contenu .= $message;

        $content   = explode($lb, $contenu);

        // if ($body) {$bdy = preg_replace("/^\./","..",explode($body_lb,$body));}

        // build the array for the SMTP dialog. Line content is array(command, success code, additonal error message)

        if ($config->get('SMTP_PASS') <> "") {
            // SMTP authentication methode AUTH LOGIN, use extended HELO "EHLO"
            $smtp = array(
                // call the server and tell the name of your local host
                array("EHLO " . $config->get('LOC_HOST') . $lb, "220,250", "HELO error: "),
                // request to auth
                array("AUTH LOGIN" . $lb, "334", "AUTH error:"),
                // username
                array(base64_encode($config->get('SMTP_ACC')) . $lb, "334", "AUTHENTIFICATION error : "),
                // password
                array(base64_encode($config->get('SMTP_PASS')) . $lb, "235", "AUTHENTIFICATION error : "),
            );
        } else {
            $smtp = array(array("HELO " . $config->get('LOC_HOST') . $lb, "220,250", "HELO error: "));
        }

        // call the server and tell the name of your local host

        // envelop
        $smtp[] = array("MAIL FROM: <" . $from . ">" . $lb, "250", "MAIL FROM error: ");

        $tos    = explode(",", $to); //header
        for ($i = 0; $i < count($tos); $i++) {
            $smtp[] = array("RCPT TO: <" . $tos[$i] . ">" . $lb, "250", "RCPT TO error: ");
        }
        // begin data
        $smtp[] = array("DATA" . $lb, "354", "DATA error: ");
        foreach ($content as $cont) {
            $smtp[] = array($cont . $lb, "", "");
        }
        $smtp[] = array("." . $lb, "250", "DATA(end)error: ");
        $smtp[] = array("QUIT" . $lb, "221", "QUIT error: ");

        // open socket
        $fp = @fsockopen($config->get('SMTP_HOST'), $smtp_port, $errno, $errstr, 15);
        if (!$fp) {
            writelog("Cannot connect to host", $config->get('SMTP_HOST'), 0);
            msg('053 : Impossible de se connecter au serveur mail "' . $config->get('SMTP_HOST') . '".');
            return false;
        }

        $banner = fgets($fp, 1024);
        // perform the SMTP dialog with all lines of the list
        foreach ($smtp as $req) {
            $r = $req[0];
            // send request
            @fputs($fp, $req[0]);
            // get available server messages and stop on errors
            if ($req[1]) {
                while ($result = fgets($fp, 1024)) {
                    if (mb_substr($result, 3, 1) == " ") {
                        break;
                    }
                }
                if (!strstr($req[1], mb_substr($result, 0, 3))) {
                    writelog($req[2] . $result, $config->get('SMTP_HOST'), 0);
                    msg('054 : Problème lors du dialogue avec le serveur mail "' . $config->get('SMTP_HOST') . '" : ' . $req[2] . $result);
                    return false;
                }
            }
        }
        $result = fgets($fp, 1024);

        fclose($fp);
        return true;
    }
}


// require(__DIR__ . '/traceIP/trace_ip.php');

// if (!defined("TIP_LEVEL_NO_IP_TEST")) define("TIP_LEVEL_NO_IP_TEST", 9);

/* function login($path = '', $cas = 3)  // Uniquement utilisé par authentification
{
    global $root;
    header("Location: " . $root . "/login.php?cas=" . $cas . "&uri=" . urlencode($_SERVER['REQUEST_URI']));
    die();
}
 */
/* function current_user($zone)
{
    global $userlogin, $u_db;
    if ($userlogin == "") {
        return 0;
    }  // non connecté
    else {
        $sql = "SELECT * FROM " . EA_UDB . "_user3 WHERE login = '" . $userlogin . "'";
        $res = EA_sql_query($sql, $u_db);
        if ($res and EA_sql_num_rows($res) != 0) {
            $row = EA_sql_fetch_array($res);
            if ($zone == "MD5") {
                return $row["hashpass"];
            }
            //return md5($row["login"].$row["passw"]);
            else {
                return $row[$zone];
            }
        } 

        return 0;
    }
} */

/* function logonok($level = 0)
{
    global $root,$userlogin,$statut,$expirok,$u_db;

    if (!defined("EA_MAINTENANCE")) {
        define("EA_MAINTENANCE", 0);
    }
    // Autentification PHP
    if (isset($_REQUEST['login'])) {  // si on présente un login, on le teste de suite
        $userid = 0;
        $statut = "";
        $expirok = true;
        $session->get('user')['level'] = CheckUser(getparam('login'), getparam('passwd'), getparam('codedpass'), getparam('iscoded'), $userid);
        $t = array("W" => 5, "A" => 5, "B" => 7);
        if($session->get('user')['level'] == 0) {
            if (!$expirok) {
                $cas = 6;
            } elseif (array_key_exists($statut, $t)) {
                $cas = $t[$statut];
            } else {
                $cas = 1;
            }
            login($root, $cas);
        } else {
            if (getparam('iscoded') == 'Y') {
                $md5 = getparam('codedpass');
            } else {
                $md5 = sha1(getparam('passwd'));
            }
            if (getparam('saved') == 'yes') {
                $duree = time() + (60 * 60 * 24) * 5;
            } else {
                $duree = 0;
            }
            setcookie('md5', $md5, $duree, $root);
            setcookie('userid', $userid, $duree, $root);
            $niveau = $userlevel;
            $userlogin = getparam('login');
            if ($userlevel >= LEVEL_MAIL_LOGIN) {
                $lb        = "\r\n";
                $Vdate = date("d/m/Y à H:i");
                $array_server_values = $_SERVER;
                $Vua   = $array_server_values['HTTP_USER_AGENT'];
                $Vip   = $array_server_values['REMOTE_ADDR'];
                $message  = "Information sécurité : Vous vous êtes connecté au site suivant " . $lb;
                $message .= "" . $lb;
                $message .= EA_URL_SITE . $root . "/index.php" . $lb;
                $message .= "" . $lb;
                $message .= "avec le login [" . getparam('login') . "] ce " . $Vdate . $lb;
                $message .= "" . $lb;
                $message .= "Votre adresse IP est :" . $Vip . $lb;
                $message .= "Votre client est : " . $Vua . $lb;
                $sujet = "Confirmation de login sur " . SITENAME;
                $sender = mail_encode(SITENAME) . ' <' . LOC_MAIL . ">";
                $okmail = sendmail($sender, current_user('email'), $sujet, $message);
            }
        }
    } elseif(isset($_COOKIE['userid']) and isset($_COOKIE['md5'])) {
        $niveau = CheckMD5($_COOKIE['userid'], $_COOKIE['md5']);  // mets à jour $userlogin
        if ($niveau < $level) {
            $niveau = 0;
        }
    } elseif ($level <= PUBLIC_LEVEL) {
        $niveau = PUBLIC_LEVEL;  // ne pas (re)positionner userlogin
    } else {
        //echo "ERROR LOGIN. redirigé sur ".$root."/login.php?cas=2&uri=".urlencode($_SERVER['REQUEST_URI']);
        login($root, '2');
    }
    if (!(EA_MAINTENANCE == 0 or $niveau == 9)) {
        $niveau = 0;
    }
    recharger_solde();
    // test IP
    if ($niveau < TIP_LEVEL_NO_IP_TEST && $niveau != 5) {
        traceip();
    }
    return $niveau;
} */

/* function CheckUser($login, $pw, $codedpw, $coded, &$userid)
// Vérification réelle du droit d'accès
{
    global $statut, $level, $expirok, $u_db;

    if (strlen($login) > 15 or strlen($pw) > 15) {
        writelog('Login ERROR : ' . $login, $pw, $nbresult);
        // probablement attaque avec injection de code
        return 0;
    } else {
        $res = EA_sql_query("SELECT * FROM " . EA_UDB . "_user3 WHERE login='" . $login . "'", $u_db);
        $nbresult = EA_sql_num_rows($res);
        if ($nbresult > 1) {
            writelog('Login ERROR : ', $login, $nbresult);
            // probablement attaque avec injection de code ou 2 logins identiques dans la base
            return 0;
        } else {
            if ($nbresult == 1) {
                $row = EA_sql_fetch_array($res);
                $statut = $row["statut"];
                if ($coded == 'N') {
                    $pwok = ($row["hashpass"] === sha1($pw));
                } else {
                    $pwok = ($row["hashpass"] === $codedpw);
                }
                if ($statut == 'N') {
                    $expirok = ($row["dtexpiration"] >= date("Y-m-d", time()) or $row["level"] == 9);
                }
                // recontrôle des user et pw pour assurer respect de la casse et anti injection
                if ($row["login"] == $login and $pwok and $expirok and $row["level"] >= $level and ($row["level"] == 9 or $row["statut"] == 'N')) {
                    $GLOBALS['EA_NP'] = $row["nom"] . ' ' . $row["prenom"]; // MENU $EA_NP
                    $userid = $row["ID"];
                    return max($row["level"], PUBLIC_LEVEL);
                } else {
                    return 0;
                }
            } else {
                return 0;
            }
        }
    }
} */

/* function CheckMD5($userid, $md5)
{
    global $userlogin, $level, $u_db;
    $res = EA_sql_query("SELECT * FROM " . EA_UDB . "_user3 WHERE ID='" . $userid . "'", $u_db);
    if (EA_sql_num_rows($res) == 1) {
        $row = EA_sql_fetch_array($res);
        if ($row["hashpass"] != $md5) {
            return 0;
        } else {
            if ($row["level"] >= $level) {
                $GLOBALS['EA_NP'] = $row["nom"] . ' ' . $row["prenom"];// MENU $EA_NP
                $userlogin = $row["login"];
                return max($row["level"], PUBLIC_LEVEL);
            } else {
                return 0;
            }
        }
    } else {
        return 0;
    }
} */


// Fonction d'envoi de mél avec PHPMailer (à installer dans 'tools/PHPMailer/') : https://github.com/PHPMailer/PHPMailer
// En entrée :
//     SMTP_HOST : Serveur d'envoi avec port sous la forme  SERVEUR:PORT
//     SMTP_PASS : mot de passe du compte (si non indiqué, pas d'envoi authentifié)
//     SMTP_ACC  : Adresse mel du compte des envois authentifiés
//     LOC_HOST  : Nom du serveur d'origine des mels
//     LOC_MAIL  : Adresse mail de l'administrateur. Adresse d'émetteur par défaut
//     $from     : mel emetteur
//     $to       : mel destinataire
//     $sujet    : sujet du mel
//     $message  : texte du mel
//
// En sortie : $retour_mail_externe "true" si réussi, "false" sinon
// VOIR : /admin/aide/config.html#Mail

$retour_mail_externe = false;

$rep_PHPMailer = dirname(__FILE__) . '/PHPMailer/';
if (!file_exists($rep_PHPMailer)) {
    msg("052 : Dossier PHPMailer absent.");
    writelog('Dossier PHPMailer absent.', 'PHPMailer', 0);
    return $retour_mail_externe; // Le return est nécessaire pour stopper le script mais le contenu n'est pas utilisé
}
if (($config->get('SMTP_HOST') . $config->get('LOC_HOST')) == "") {
    msg("052 : Paramètres de gestion du mail incomplètement configurés.");
    writelog('Paramètres manquants.', 'PHPMailer', 0);
    return $retour_mail_externe; // Le return est nécessaire pour stopper le script mais le contenu n'est pas utilisé
}
// Content-Type: text/plain; charset=iso-8859-1
use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;
require_once($rep_PHPMailer . "src/Exception.php");
require_once($rep_PHPMailer . "src/PHPMailer.php");
require_once($rep_PHPMailer . "src/SMTP.php");
//date_default_timezone_set("Europe/Paris");
$mail = new PHPMailer();

// Extrait le port du nom du serveur, par défaut port 465
$temp = explode(':', $config->get('SMTP_HOST'));
if (!isset($temp[1])) {
    $temp[1] = 465;
}

$mail->Host = $temp[0];
$mail->Port = $temp[1];
$mail->Hostname = $config->get('LOC_HOST');

if ($config->get('SMTP_PASS') == "") {
    $mail->SMTPAuth = false;
} else {
    $mail->SMTPAuth = true;
    $mail->Username = $config->get('SMTP_ACC'); //Username to use for SMTP authentication - use full email address for gmail
    $mail->Password = $config->get('SMTP_PASS'); //Password to use for SMTP authentication
}

$mail->isSMTP();
$mail->isHTML(false);
$mail->CharSet = 'UTF-8';
$mail->Subject = $sujet;
//$mail->AltBody = $message;
$mail->Body = $message;
// $mail->SMTPDebug = SMTP::DEBUG_SERVER;
$les_adresses = $mail->parseAddresses($from, false);
$mail->SetFrom($les_adresses[0]['address'], $les_adresses[0]['name']);
// $mail->setFrom(LOC_MAIL, SITENAME);
$to_array = explode(',', $to);
foreach ($to_array as $address) {
    $mail->AddAddress($address, 'ExpoActes');
}
$mail->addReplyTo($from);

try {
    $mail->send();
    $retour_mail_externe = true;
    return $retour_mail_externe; // Le return est nécessaire pour stopper le script mais le contenu n'est pas utilisé
} catch (\Exception $e) {
    msg('Problème lors du dialogue avec le serveur mail: " : ' . $e->getMessage());
    writelog($e->getMessage(), $mail->ErrorInfo, 0);
    return $retour_mail_externe; // Le return est nécessaire pour stopper le script mais le contenu n'est pas utilisé
}

<?php

/**
 * Recupère les arguments passés en mode chemin ou args suivant config
 * @deprecated
 */
function pathroot(&$root, &$path, &$arg1, &$arg2, &$arg3)
{
    $defarg1 = $arg1;
    $defarg2 = $arg2;
    global $scriptname; // pour pouvoir le récupérer
    // $chemin = preg_split("/\/|\?/i", $_SERVER["REQUEST_URI"], -1, PREG_SPLIT_NO_EMPTY);
    $_SERVER["REQUEST_URI"] = str_replace('/?', '/index.php?', $_SERVER["REQUEST_URI"]);
    $chemin = preg_split("/\//i", $_SERVER["REQUEST_URI"], -1, PREG_SPLIT_NO_EMPTY);
    $i = 0;
    while (isset($chemin[$i]) and strpos($chemin[$i], ".php") === false and $i < count($chemin)) {
        if ($chemin[$i] != "admin" and $chemin[$i] != "install" and $chemin[$i] != "perso") {
            $root = $root . "/" . $chemin[$i];
        }
        $path = $path . "/" . $chemin[$i];
        $i++;
    }
    $arg1 = "";
    $arg2 = "";
    $arg3 = "";
    $pos = 0;
    if (isset($chemin[$i])) {
        $pos = strpos($chemin[$i], "?args=");
        $scriptname = mb_substr($chemin[$i], 0, strpos($chemin[$i], ".php"));  // nom du script sans le .php
    }
    if ($pos == 0) {
        $i++;
        if (count($chemin) > $i) {
            $arg1 = decodemyslash(urldecode(nogetargs($chemin[$i])));
        }
        $i++;
        if (count($chemin) > $i) {
            $arg2 = decodemyslash(urldecode(nogetargs($chemin[$i])));
        }
        $i++;
        if (count($chemin) > $i) {
            $arg3 = urldecode(nogetargs($chemin[$i]));
        }
    } else {
        $args = mb_substr($chemin[$i], $pos + 6);
        $pos = strpos($args, "&");
        if ($pos > 0) {
            $args = mb_substr($args, 0, $pos);
        }
        $argn = preg_split("/,/i", $args, -1, PREG_SPLIT_NO_EMPTY);
        $j = 0;
        if (count($argn) > $j) {
            $arg1 = urldecode(nogetargs($argn[$j]));
        }
        $j++;
        if (count($argn) > $j) {
            $arg2 = urldecode(nogetargs($argn[$j]));
        }
        $j++;
        if (count($argn) > $j) {
            $arg3 = urldecode(nogetargs($argn[$j]));
        }
    }
    // recup des valeurs par défaut
    if ($arg1 == "") {
        $arg1 = $defarg1;
    }
    if ($arg2 == "") {
        $arg2 = $defarg2;
    }
}

/**
 * permet de passer des nom avec slash dans l'url (Alle s/Semois)
 * @deprecated
 */
function encodemyslash($text)
{
    $newslash = chr(190);  // 3/4
    return str_replace('/', $newslash, $text);
}

/**
 * @deprecated
 */
function decodemyslash($text)
{
    $newslash = chr(190);  // 3/4
    return str_replace($newslash, '/', $text);
}


/**
 * @deprecated
 */
function nogetargs($chaine)
{
    $x = strpos($chaine, "?");
    if ($x > 0) {
        return mb_substr($chaine, 0, $x);
    }

    return $chaine;
}


function optimize($sql)  // pour détection des optimisations à faire
{
    if (defined("OPTIMIZE") or getparam('OPTIMIZE') == "YES") {
        if (isin(strtoupper($sql), 'SELECT') >= 0) {
            $optim = EA_sql_query("EXPLAIN " . $sql);
            echo '<p>' . preg_replace('/union/', '<br /><b>UNION</b><br />', $sql) . '</p>';
            if (strtoupper(mb_substr($sql, 0, 1)) == 'S') {
                $nbres = EA_sql_num_rows($optim);
                if ($nbres > 0) {
                    print '<pre> OPTIMISATION : <p> ';
                    while ($line = EA_sql_fetch_assoc($optim)) {
                        print_r($line);
                    }
                    echo '</pre>';
                }
            }
        } else {
            print '<p>REQUETE MAJ : ' . $sql . '<p> ';
        }
    }
}


/**
 * Préselectionne le mode de recherche par défaut selon le parametre RECH_DEF_TYP
 */
function prechecked(string $typrech): string
{
    global $config;
    $search_modes = [
        1 => ['code' => 'E', 'libele' => 'Exacte'],
        2 => ['code' => 'D', 'libele' => 'au Début'],
        3 => ['code' => 'F', 'libele' => 'à la Fin'],
        4 => ['code' => 'C', 'libele' => 'est Compris dans'],
        5 => ['code' => 'S', 'libele' => 'Sonore']
    ];
    $default = $search_modes[$config->get('RECH_DEF_TYP')]['code'];

    if ($default === $typrech) {
        return ' value="' . $typrech . '" checked';
    }

    return ' value="' . $typrech . '" ';
}



/**
 * Return the code of search mode by default according to RECH_DEF_TYP parameter
 */
function default_rech_code(): string
{
    global $config;
    $search_modes = [
        1 => ['code' => 'E', 'libele' => 'Exacte'],
        2 => ['code' => 'D', 'libele' => 'au Début'],
        3 => ['code' => 'F', 'libele' => 'à la Fin'],
        4 => ['code' => 'C', 'libele' => 'est Compris dans'],
        5 => ['code' => 'S', 'libele' => 'Sonore']
    ];

    return $search_modes[$config->get('RECH_DEF_TYP')]['code'];
}


function listbox_types($fieldname, $default, $vide = 0)
{
    $act_types = [
        ['code' => 'N', 'code_3' => 'NAI', 'label' => 'Naissances'],
        ['code' => 'M', 'code_3' => 'MAR', 'label' => 'Mariages'],
        ['code' => 'D', 'code_3' => 'DEC', 'label' => 'Décès'],
        ['code' => 'V', 'code_3' => 'DIV', 'label' => 'Actes divers'],
    ];

    echo '<select name="' . $fieldname . '" size="1">';
    foreach ($act_types as $act_type) {
        echo '<option value="' . $act_type['code'] . '" ' . ($act_type['code'] === $default ? 'selected' : '') . '>' . $act_type['label'] . '</option>';
    }
    echo " </select>";
}

function sexe($code)
{
    switch ($code) {
        case "M":
            return "Masculin";
            break;
        case "F":
            return "Féminin";
            break;
        case "?":
            return "Non précisé";
            break;
    }
}

function show_depart($depart)
{
    if ($depart <> "") {
        return " [" . $depart . ']';
    }

    return "";
}

function dt_expiration_defaut()
{
    global $config;
    if ($config->get('LIMITE_EXPIRATION') == "") {
        $dtexpir = $config->get('TOUJOURS');
    } else {
        $dtexpir = "";
        if (isin($config->get('LIMITE_EXPIRATION'), "/") > 0) {
            $MauvaiseAnnee = 1;
            ajuste_date($config->get('LIMITE_EXPIRATION'), $dtexpir, $MauvaiseAnnee);  // creée ladate en sql
        } else {
            if ($config->get('LIMITE_EXPIRATION') > 0) {
                $dtexpir = date("Y-m-d", time() + 60 * 1440 * $config->get('LIMITE_EXPIRATION'));
            } else {
                $dtexpir = $config->get('TOUJOURS');
            }
        }
    }
    return $dtexpir;
}

function def_mes_sendmail()
{
    $lb        = "\r\n";
    $message  = "Bonjour," . $lb;
    $message .= "" . $lb;
    $message .= "Un compte vient d'être créé pour vous permettre de vous connecter au site :" . $lb;
    $message .= "" . $lb;
    $message .= "#URLSITE#" . $lb;
    $message .= "" . $lb;
    $message .= "Votre login : #LOGIN#" . $lb;
    $message .= "Votre mot de passe : #PASSW#" . $lb;
    $message .= "" . $lb;
    $message .= "Cordialement," . $lb;
    $message .= "" . $lb;
    $message .= "Votre webmestre." . $lb;
    return $message;
}

function geoUrl($gid)
{
    global $root, $config, $userAuthorizer;
    $geourl = '';
    if ($gid > 0 && $config->get('GEO_LOCALITE') > 0 && $userAuthorizer->isGranted(1)) {
        $geourl = ' <a href="' . $root . '/admin/geolocalizations/detail?id=' . $gid . '"><img src="' . $root . '/themes/img/boussole.png" alt="Localité détails" title="Localité détails"></a>';
    }

    return $geourl;
}

function close_db($dblink) // ferme la connexion à la DB
{
    EA_sql_close($dblink);
}

function today()
{
    return date("Y-m-d", time());
}

function now()
{
    return date("Y-m-d H:i:s", time());
}

function microdelay($delay) //Just for the fun ! ;-)
{
    @fsockopen("tcp://localhost", 31238, $errno, $errstr, $delay);
}

function mail_encode($texte)
{
    // code les textes pour l'adresse mail ou le sujet de façon à passer même en 7bits
    return "=?" . MAIL_CHARSET . "?B?" . base64_encode($texte) . "?=";
}

function valid_mail_adrs($email)
{
    if (preg_match('`^\w([-_.]?\w)*@\w([-_.]?\w)*\.([a-z]{2,4})$`', $email)) {
        return true;
    } 
    
    return false;
}

// Détection du codage UTF-8 d'une chaîne.
function is_utf8($str)
{
    $c = 0;
    $b = 0;
    $bits = 0;
    $len = strlen($str);
    for ($i = 0; $i < $len; $i++) {
        $c = ord($str[$i]);
        if ($c > 128) {
            if (($c >= 254)) {
                return false;
            } elseif ($c >= 252) {
                $bits = 6;
            } elseif ($c >= 248) {
                $bits = 5;
            } elseif ($c >= 240) {
                $bits = 4;
            } elseif ($c >= 224) {
                $bits = 3;
            } elseif ($c >= 192) {
                $bits = 2;
            } else {
                return false;
            }
            if (($i + $bits) > $len) {
                return false;
            }
            while ($bits > 1) {
                $i++;
                $b = ord($str[$i]);
                if ($b < 128 || $b > 191) {
                    return false;
                }
                $bits--;
            }
        }
    }
    return true;
}

function val_status_mysql($label)
{
    if ($result = EA_sql_query("SHOW STATUS LIKE '" . $label . "'")) {
        $row = EA_sql_fetch_assoc($result);
        return $row['Value'];
    }

    return "??";
}

function sans_quote($texte)  // retourne vrai si aucune quote dans le texte
{
    if (strpos($texte, "'") === false) {
        return true;
    }

    return false;
}

function EA_sql_close($LINK)
{
    return BD_EA_link_remove($LINK, false);
}

function lb_regime_user($regime, $vide = 0)
{
    echo '<select name="regime" size="1">';
    if ($vide == 1) {
        echo '<option ' . (-1 == $regime ? 'selected' : '') . '> -- Pas de condition -- ';
    }
    echo '<option ' . (0 == $regime ? 'selected' : '') . '>0 : Accès libre</option>';
    echo '<option ' . (1 == $regime ? 'selected' : '') . '>1 : Recharge manuelle</option>';
    echo '<option ' . (2 == $regime ? 'selected' : '') . '>2 : Recharge automatique</option>';
    echo "</select>";
}

function lb_statut_user($statut, $vide = 0)
{
    echo '<select name="statut" size="1">';
    if (($vide % 2) == 1) {
        echo '<option ' . ('0' == $statut ? 'selected' : '') . '> -- Pas de condition -- </option>';
    }
    echo '<option ' . ('W' == $statut ? 'selected' : '') . '>W : Attente d\'activation</option>';
    echo '<option ' . ('A' == $statut ? 'selected' : '') . '>A : Attente d\'approbation</option>';
    echo '<option ' . ('N' == $statut ? 'selected' : '') . '>N : Accès autorisé</option>';
    echo '<option ' . ('B' == $statut ? 'selected' : '') . '>B : Accès bloqué</option>';
    /* @deprecated
    if (($vide % 4) == 3) {
        echo '<option ' . ('X' == $statut ? 'selected' : '') . '>X : Compte expiré de ' . DUREE_EXPIR . ' jrs</option>';
    } */
    echo "</select>";
}

function lb_droits_user($level, $all = 0)  //
{
    echo '<select name="lelevel" size="1">';
    if ($all == 2) {
        echo '<option ' . (10 == $level ? 'selected' : '') . '>A : -- Envoi à tous -- </option>';
    }
    echo '<option ' . (0 == $level ? 'selected' : '') . '>Public</option>';
    echo '<option ' . (1 == $level ? 'selected' : '') . '>1 : Liste des communes</option>';
    echo '<option ' . (2 == $level ? 'selected' : '') . '>2 : Liste des patronymes</option>';
    echo '<option ' . (3 == $level ? 'selected' : '') . '>3 : Table des actes</option>';
    echo '<option ' . (4 == $level ? 'selected' : '') . '>4 : Détails des actes (avec limites)</option>';
    echo '<option ' . (5 == $level ? 'selected' : '') . '>5 : Détails sans limitation</option>';
    echo '<option ' . (6 == $level ? 'selected' : '') . '>6 : Chargement NIMEGUE et CSV</option>';
    echo '<option ' . (7 == $level ? 'selected' : '') . '>7 : Ajout d\'actes</option>';
    echo '<option ' . (8 == $level ? 'selected' : '') . '>8 : Administration tous actes</option>';
    echo '<option ' . (9 == $level ? 'selected' : '') . '>9 : Gestion des utilisateurs</option>';
    if ($all = 1) {
        echo '<option ' . (10 == $level ? 'selected' : '') . '>Super administrateur</option>';
    }
    echo "</select>";
}

function show_signal_erreur($typ, $xid)
{
    global $root;
    show_simple_item(0, 1, '<a href="' . $root . '/signal_erreur?xtyp=' . $typ . '&xid=' . $xid . '" target="_blank">Cliquez ici pour la signaler</a>', 'Trouvé une erreur ?');
}

function antispam($email)
{
    return str_replace(array("@"), array("@anti.spam.com@"), $email);
}

// Retrait d'une liaison de la table
function BD_EA_link_remove($LINK, $is_mysql = false)
{
    $LINK = EA_sql_which_link($LINK);
    if (isset($LINK->thread_id) && is_numeric($LINK->thread_id)) {
        $thread_id =  $LINK->thread_id;
    } else {
        $thread_id =  false;
    }
    $result = mysqli_close($LINK);
    // la fermeture est OK et il y avait un ID de liaison BD
    if ($result && $thread_id) {
        // parcourir le tableau des liens pour supprimer celui traité
        foreach ($GLOBALS['BD_EA_link'] as $k => $v) {
            if ($v['thread_id'] === $thread_id) {
                array_splice($GLOBALS['BD_EA_link'], $k, 1);
                break;
            }
        }
    } else {
        // Ce cas ne devrait pas arriver
        // la fermeture d'une liaison existante dans le tableau est en échec
        if ($result === null) {
            return false;
        }
    }
    echo 'ON FERME';
    exit;
    foreach ($GLOBALS['BD_EA_link'] as $k => $v) {
        print_r($v);
    }

    return $result;
}

// format : somme de 1= label gras, 2 label italique, 4 info gras, 8 info italique
function show_grouptitle3($row, $retrait, $format, $type, $group, $sigle = '')
{
    global $config, $userAuthorizer, $lg;

    $listvals = "";
    $cas = "'O'";
    if ($userAuthorizer->isGranted(6)) {
        $cas .= ",'A'";
    }
    $req1 = "SELECT count(ZONE) AS CPT FROM " . $config->get('EA_DB') . "_metadb"
        . " WHERE DTABLE='" . $type . "' AND GROUPE='" . $group . "' AND AFFICH in (" . $cas . ")";
    $rs = EA_sql_fetch_assoc(EA_sql_query($req1));
    $affich = $rs["CPT"];

    if ($affich == 0) { // si pas d'obligatoires alors voir les facultatives
        $req1 = "SELECT ZONE FROM " . $config->get('EA_DB') . "_metadb"
            . " WHERE DTABLE='" . $type . "' AND GROUPE='" . $group . "' AND AFFICH='F'";
        $res1 = EA_sql_query($req1);

        while ($rz = EA_sql_fetch_assoc($res1)) {
            $listvals .= trim($row[$rz["ZONE"]]);
        }
        $affich = strlen($listvals);
    }

    if ($affich > 0) {
        echo '<tr>';
        echo '<td class="fich2 bolder">' . grp_label($group, $type, $lg, $sigle) . '</td>';
        echo '<td class="fich1"></td>';
        echo '</tr>';
    }
}